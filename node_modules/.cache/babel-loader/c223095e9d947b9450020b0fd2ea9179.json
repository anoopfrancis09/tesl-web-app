{"ast":null,"code":"var _jsxFileName = \"/Users/anofrancis/Desktop/tesla-web-app/src/components/ModelConfiguration/ModelOrderPage.js\";\nimport React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport Fab from '@material-ui/core/Fab'; // import image from '../assets/modelX.png'\n\nimport modelS from '../../assets/modelS.png';\nimport whiteModelS from '../../assets/compositor\\ 1.png';\nimport redModelS from '../../assets/compositor\\ (1)\\ 1.png';\nimport ModelOrderConfiguration from './ModelOrderConfigurations';\nimport { fetchModelConfiguration } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModelOrderMainPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onColorSelectionChange = color => {\n      const colorCode = color.toLowerCase().includes('red') ? 'red' : 'white';\n      this.setState({\n        selectedColor: colorCode\n      });\n    };\n\n    this.onOrderSelection = data => {\n      const {\n        history\n      } = this.props;\n      history.push('/finalOrderPage');\n    };\n\n    this.state = {\n      selectedColor: 'white'\n    };\n    this.onColorSelectionChange = this.onColorSelectionChange.bind(this);\n    this.onOrderSelection = this.onOrderSelection.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {}\n\n  componentDidMount() {\n    const {\n      location\n    } = this.props;\n    const {\n      modelName\n    } = location.state;\n    const {\n      getModelConfig\n    } = this.props;\n    getModelConfig(modelName);\n  }\n\n  render() {\n    const {\n      location,\n      modelConfig,\n      history\n    } = this.props;\n    const {\n      modelName\n    } = location.state;\n    const {\n      selectedColor\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: modelConfig ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          backgroundColor: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 7,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedColor === 'white' ? whiteModelS : redModelS,\n            alt: \"modelS\",\n            style: {\n              width: '1080px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 5,\n          children: /*#__PURE__*/_jsxDEV(ModelOrderConfiguration, {\n            onColorChange: this.onColorSelectionChange,\n            history: history,\n            modelName: modelName,\n            modelConfig: modelConfig\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 10\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getModelConfig: model => dispatch(fetchModelConfiguration(model))\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    modelConfig: state.allCarReducer.selectedModelConfig\n  };\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(ModelOrderMainPage);","map":{"version":3,"sources":["/Users/anofrancis/Desktop/tesla-web-app/src/components/ModelConfiguration/ModelOrderPage.js"],"names":["React","Component","Grid","connect","compose","Fab","modelS","whiteModelS","redModelS","ModelOrderConfiguration","fetchModelConfiguration","ModelOrderMainPage","constructor","props","onColorSelectionChange","color","colorCode","toLowerCase","includes","setState","selectedColor","onOrderSelection","data","history","push","state","bind","componentWillReceiveProps","nextProps","componentDidMount","location","modelName","getModelConfig","render","modelConfig","backgroundColor","width","mapDispatchToProps","dispatch","model","mapStateToProps","allCarReducer","selectedModelConfig"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Grid\n} from '@material-ui/core'\nimport { connect } from 'react-redux'\nimport compose from 'recompose/compose'\nimport Fab from '@material-ui/core/Fab'\n// import image from '../assets/modelX.png'\nimport modelS from '../../assets/modelS.png'\nimport whiteModelS from '../../assets/compositor\\ 1.png'\nimport redModelS from '../../assets/compositor\\ (1)\\ 1.png'\nimport ModelOrderConfiguration from './ModelOrderConfigurations'\nimport {fetchModelConfiguration} from '../../actions'\n\nclass ModelOrderMainPage extends Component {\n      constructor(props) {\n        super(props)\n        this.state = {\n          selectedColor: 'white'\n        }\n        this.onColorSelectionChange = this.onColorSelectionChange.bind(this);\n        this.onOrderSelection = this.onOrderSelection.bind(this);\n      }\n\n  componentWillReceiveProps(nextProps) {\n    \n  }\n\n  onColorSelectionChange = (color) => {\n    const colorCode = color.toLowerCase().includes('red') ? 'red' : 'white'\n    this.setState({selectedColor: colorCode});\n  }\n\n  onOrderSelection = (data) => {\n    const {history} = this.props\n\n    history.push('/finalOrderPage')\n  }\n\n  componentDidMount() {\n    const { location } = this.props\n    const { modelName } = location.state\n    const { getModelConfig } = this.props\n\n    getModelConfig(modelName)\n  }\n\n\n  render() {\n    const { location, modelConfig, history } = this.props\n    const { modelName } = location.state\n    const { selectedColor } = this.state;\n    \n    return (\n        <div>\n        {modelConfig ? \n        (<Grid container style={{backgroundColor: 'white'}}>\n                <Grid item lg={7}>\n                    <img src={selectedColor === 'white' ? whiteModelS : redModelS} alt='modelS' style={{width: '1080px'}}/>\n                </Grid>\n                <Grid item lg={5}>\n                    <ModelOrderConfiguration onColorChange={this.onColorSelectionChange} history={history} modelName= {modelName} modelConfig={modelConfig}/>\n                </Grid>\n            </Grid>\n        ) : null }\n        </div>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      getModelConfig: (model) => dispatch(fetchModelConfiguration(model))\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    modelConfig: state.allCarReducer.selectedModelConfig\n  }\n}\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(ModelOrderMainPage)\n"]},"metadata":{},"sourceType":"module"}