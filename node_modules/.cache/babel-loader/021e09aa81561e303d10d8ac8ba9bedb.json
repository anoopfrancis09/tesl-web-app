{"ast":null,"code":"var _jsxFileName = \"/Users/anofrancis/Desktop/tesla-web-app/src/components/ModelConfiguration/ModelOrderConfigurations.js\";\nimport React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport Fab from '@material-ui/core/Fab'; // import image from '../assets/modelX.png'\n\nimport TopBottomTextView from '../MinimalSpecView/TopBottomTextView';\nimport { fetchModelDetails } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ModelOrderConfiguration extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onVariantSelection = variant => () => {\n      this.setState({\n        selectedVariant: variant\n      }); // const {history} = this.props\n      // history.push('/modelOrder')\n    };\n\n    this.onPaintSelection = paintindex => () => {\n      this.setState({\n        selectedPaint: paintindex\n      });\n    };\n\n    this.onWheelSection = wheelIndex => () => {\n      this.setState({\n        selectedWheel: wheelIndex\n      });\n    };\n\n    this.state = {\n      selectedVariant: '',\n      selectedPaint: 0,\n      selectedWheel: 0\n    };\n    this.onVariantSelection = this.onVariantSelection.bind(this);\n    this.onPaintSelection = this.onPaintSelection.bind(this);\n    this.onWheelSection = this.onWheelSection.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {}\n\n  render() {\n    const {\n      modelName,\n      modelConfig\n    } = this.props;\n    const {\n      selectedVariant,\n      selectedPaint\n    } = this.state;\n    console.log('Model config:::', modelConfig);\n    const variants = modelConfig && modelConfig.variants ? modelConfig.variants.map(item => {\n      return {\n        variant: item.variant,\n        variantDisplayName: item.variantName\n      };\n    }) : [];\n    console.log('variants:::', variants); // const selectedVariant = ;\n\n    const variantData = modelConfig && modelConfig.variants ? modelConfig.variants.filter(item => {\n      return item.variant === (selectedVariant !== '' ? selectedVariant : variants[0].variant);\n    })[0] : {};\n    console.log('variantData::', variantData);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"modelConfigPage\",\n      children: Object.keys(variantData).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          spacing: 4,\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"modelName\",\n              children: modelConfig.displayName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              spacing: 2,\n              justifyContent: \"space-between\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TopBottomTextView, {\n                  topData: variantData.range,\n                  bottomData: \"Est Range\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TopBottomTextView, {\n                  topData: variantData.topSpeed,\n                  bottomData: \"Top Speed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TopBottomTextView, {\n                  topData: `${variantData.acceleration.time} sec`,\n                  bottomData: `${variantData.acceleration.speed} sec`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"column\",\n              spacing: 2,\n              children: variants.map((eachVariant, index) => {\n                return /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  style: {\n                    width: '100%'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    class: selectedVariant === eachVariant.variant || selectedVariant === '' && index === 0 ? 'bt-active shadow-none' : 'btn shadow-none',\n                    onClick: this.onVariantSelection(eachVariant.variant),\n                    children: eachVariant.variantDisplayName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          spacing: 4,\n          style: {\n            marginTop: 60\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"modelName\",\n              children: \"Paint\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              spacing: 4,\n              children: modelConfig.paints.map((eachPaint, index) => {\n                return /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    onClick: this.onPaintSelection(index),\n                    class: selectedPaint === index ? 'paintImg-active' : '',\n                    src: eachPaint.src,\n                    style: {\n                      width: 50,\n                      height: 50\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 29\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'black'\n              },\n              children: `${modelConfig.paints[selectedPaint].name} `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'gray',\n                fontWeight: 'bold'\n              },\n              children: `    $${modelConfig.paints[selectedPaint].price}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          spacing: 4,\n          style: {\n            marginTop: 60\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"modelName\",\n              children: \"Wheels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              spacing: 4,\n              children: modelConfig.wheels.map((eachPaint, index) => {\n                return /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    onClick: this.onWheelSection(index),\n                    class: selectedPaint === index ? 'wheelImg-active' : '',\n                    src: eachPaint.src,\n                    style: {\n                      width: 50,\n                      height: 50\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 29\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'black'\n              },\n              children: `${modelConfig.paints[selectedPaint].name} `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'gray',\n                fontWeight: 'bold'\n              },\n              children: `    $${modelConfig.paints[selectedPaint].price}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n/**\n * Function to call the action to call API to send login credentials for verification\n */\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getModelDetails: model => dispatch(fetchModelDetails(model))\n  };\n}\n/**\n * Function to receive the state of login api call response\n */\n\n\nfunction mapStateToProps(state) {\n  return {\n    modelData: state.allCarReducer.selectedModelData\n  };\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(ModelOrderConfiguration);","map":{"version":3,"sources":["/Users/anofrancis/Desktop/tesla-web-app/src/components/ModelConfiguration/ModelOrderConfigurations.js"],"names":["React","Component","Grid","connect","compose","Fab","TopBottomTextView","fetchModelDetails","ModelOrderConfiguration","constructor","props","onVariantSelection","variant","setState","selectedVariant","onPaintSelection","paintindex","selectedPaint","onWheelSection","wheelIndex","selectedWheel","state","bind","componentWillReceiveProps","nextProps","render","modelName","modelConfig","console","log","variants","map","item","variantDisplayName","variantName","variantData","filter","Object","keys","length","width","displayName","range","topSpeed","acceleration","time","speed","eachVariant","index","marginTop","paints","eachPaint","src","height","color","name","fontWeight","price","wheels","mapDispatchToProps","dispatch","getModelDetails","model","mapStateToProps","modelData","allCarReducer","selectedModelData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Grid\n} from '@material-ui/core'\nimport { connect } from 'react-redux'\nimport compose from 'recompose/compose'\nimport Fab from '@material-ui/core/Fab'\n// import image from '../assets/modelX.png'\nimport TopBottomTextView from '../MinimalSpecView/TopBottomTextView'\nimport {fetchModelDetails} from '../../actions'\n\nclass ModelOrderConfiguration extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          selectedVariant: '',\n          selectedPaint: 0,\n          selectedWheel: 0\n        }\n    \n        this.onVariantSelection = this.onVariantSelection.bind(this);\n        this.onPaintSelection = this.onPaintSelection.bind(this);\n        this.onWheelSection = this.onWheelSection.bind(this);\n      }\n\n  componentWillReceiveProps(nextProps) {\n    \n  }\n\n  onVariantSelection = (variant) => () => {\n\n    this.setState({selectedVariant: variant});\n    // const {history} = this.props\n\n    // history.push('/modelOrder')\n  }\n\n  onPaintSelection = (paintindex) => () => {\n    this.setState({selectedPaint: paintindex});\n  }\n\n  onWheelSection = (wheelIndex) => () => {\n    this.setState({selectedWheel: wheelIndex});\n  }\n\n  render() {\n    const { modelName, modelConfig } = this.props;\n    const { selectedVariant, selectedPaint } = this.state;\n\n    console.log('Model config:::',modelConfig)\n\n    const variants = (modelConfig && modelConfig.variants) ? modelConfig.variants.map((item) => {\n      return {variant: item.variant, variantDisplayName: item.variantName};\n  }) : [];\n\n  console.log('variants:::', variants)\n\n  // const selectedVariant = ;\n\n  const variantData = (modelConfig && modelConfig.variants) ? modelConfig.variants.filter((item) => {\n      return (item.variant === (selectedVariant !== '' ? selectedVariant : variants[0].variant));\n  })[0] : {};\n\n  console.log('variantData::', variantData)\n\n    return (\n        <div class='modelConfigPage'>\n          {\n            Object.keys(variantData).length > 0 ? \n          \n          (<><Grid container direction='column' justifyContent='center' alignItems='center' spacing={4} style={{width: '100%'}}>\n                  <Grid item>\n                      <span class='modelName'>\n                      {modelConfig.displayName}\n                      </span>\n                  </Grid>\n                  <Grid item style={{width: '100%'}}>\n                    <Grid container direction='row' spacing={2} justifyContent='space-between'>\n                      <Grid item>\n                          <TopBottomTextView topData={variantData.range} bottomData=\"Est Range\" />\n                      </Grid>\n                      <Grid item>\n                          <TopBottomTextView topData={variantData.topSpeed} bottomData=\"Top Speed\" />\n                      </Grid>\n                      <Grid item>\n                          <TopBottomTextView topData={`${variantData.acceleration.time} sec`} bottomData={`${variantData.acceleration.speed} sec`} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item style={{width: '100%'}}>\n                    <Grid container direction='column' spacing={2}>\n                    {\n                      variants.map((eachVariant, index) => {\n                        return (\n                          <Grid item style={{width: '100%'}}>\n                          <button \n                            class={(selectedVariant === eachVariant.variant || (selectedVariant === '' && index === 0)) ? 'bt-active shadow-none' : 'btn shadow-none'} \n                            onClick={this.onVariantSelection(eachVariant.variant)}> \n                            {eachVariant.variantDisplayName} \n                          </button>\n                          </Grid>\n                        )\n                      })\n                    }\n                    </Grid>\n                  </Grid>\n            </Grid>\n            <Grid container direction='column' justifyContent='center' alignItems='center' spacing={4} style={{marginTop: 60}}>\n              <Grid item>\n                        <span class='modelName'>\n                        Paint\n                        </span>\n              </Grid>\n              <Grid item>\n                    <Grid container direction='row' spacing={4}>\n                      {\n                        modelConfig.paints.map((eachPaint, index) => {\n                          return (\n                            <Grid item>\n                              <img onClick={this.onPaintSelection(index)} class={selectedPaint === index ? 'paintImg-active' : ''} src={eachPaint.src} style={{width: 50, height: 50}}/>\n                            </Grid>\n                          )\n                        })\n                      }\n                    </Grid>\n              </Grid>\n              <Grid item>\n                <span style={{color: 'black'}}>\n                  {`${modelConfig.paints[selectedPaint].name} `}\n                </span>\n                <span style={{color: 'gray', fontWeight: 'bold'}}>\n                  {`    $${modelConfig.paints[selectedPaint].price}`}\n                </span>\n              </Grid>\n            </Grid>\n            <Grid container direction='column' justifyContent='center' alignItems='center' spacing={4} style={{marginTop: 60}}>\n              <Grid item>\n                        <span class='modelName'>\n                        Wheels\n                        </span>\n              </Grid>\n              <Grid item>\n                    <Grid container direction='row' spacing={4}>\n                      {\n                        modelConfig.wheels.map((eachPaint, index) => {\n                          return (\n                            <Grid item>\n                              <img onClick={this.onWheelSection(index)} class={selectedPaint === index ? 'wheelImg-active' : ''} src={eachPaint.src} style={{width: 50, height: 50}}/>\n                            </Grid>\n                          )\n                        })\n                      }\n                    </Grid>\n              </Grid>\n              <Grid item>\n                <span style={{color: 'black'}}>\n                  {`${modelConfig.paints[selectedPaint].name} `}\n                </span>\n                <span style={{color: 'gray', fontWeight: 'bold'}}>\n                  {`    $${modelConfig.paints[selectedPaint].price}`}\n                </span>\n              </Grid>\n            </Grid>\n            </>\n              ) : null }\n        </div>\n    )\n  }\n}\n\n/**\n * Function to call the action to call API to send login credentials for verification\n */\nfunction mapDispatchToProps(dispatch) {\n  return {\n      getModelDetails: (model) => dispatch(fetchModelDetails(model))\n  }\n}\n/**\n * Function to receive the state of login api call response\n */\nfunction mapStateToProps(state) {\n  return {\n    modelData: state.allCarReducer.selectedModelData\n  }\n}\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(ModelOrderConfiguration)\n"]},"metadata":{},"sourceType":"module"}