{"ast":null,"code":"var _jsxFileName = \"/Users/anofrancis/Desktop/tesla-web-app/src/components/ModelConfiguration/ModelOrderPage.js\";\nimport React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport Fab from '@material-ui/core/Fab'; // import image from '../assets/modelX.png'\n\nimport modelS from '../../assets/modelS.png';\nimport whiteModelS from '../../assets/compositor\\ 1.png';\nimport redModelS from '../../assets/compositor\\ (1)\\ 1.png';\nimport ModelOrderConfiguration from './ModelOrderConfigurations';\nimport { fetchModelConfiguration } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModelOrderMainPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onColorSelectionChange = color => {\n      console.log('Color:::', color);\n      this.setState({\n        selectedColor: color\n      });\n    };\n\n    this.state = {\n      selectedColor: ''\n    };\n    this.onColorSelectionChange = this.onColorSelectionChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {}\n\n  componentDidMount() {\n    const {\n      location\n    } = this.props;\n    const {\n      modelName\n    } = location.state;\n    const {\n      getModelConfig\n    } = this.props;\n    getModelConfig(modelName);\n  }\n\n  render() {\n    const {\n      location,\n      modelConfig,\n      history\n    } = this.props;\n    const {\n      modelName,\n      selectedColor\n    } = location.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: modelConfig ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 7,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedColor === 'white' ? whiteModelS : redModelS,\n            alt: \"modelS\",\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 5,\n          children: /*#__PURE__*/_jsxDEV(ModelOrderConfiguration, {\n            onColorChange: this.onColorSelectionChange,\n            history: history,\n            modelName: modelName,\n            modelConfig: modelConfig\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getModelConfig: model => dispatch(fetchModelConfiguration(model))\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    modelConfig: state.allCarReducer.selectedModelConfig\n  };\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(ModelOrderMainPage);","map":{"version":3,"sources":["/Users/anofrancis/Desktop/tesla-web-app/src/components/ModelConfiguration/ModelOrderPage.js"],"names":["React","Component","Grid","connect","compose","Fab","modelS","whiteModelS","redModelS","ModelOrderConfiguration","fetchModelConfiguration","ModelOrderMainPage","constructor","props","onColorSelectionChange","color","console","log","setState","selectedColor","state","bind","componentWillReceiveProps","nextProps","componentDidMount","location","modelName","getModelConfig","render","modelConfig","history","width","mapDispatchToProps","dispatch","model","mapStateToProps","allCarReducer","selectedModelConfig"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Grid\n} from '@material-ui/core'\nimport { connect } from 'react-redux'\nimport compose from 'recompose/compose'\nimport Fab from '@material-ui/core/Fab'\n// import image from '../assets/modelX.png'\nimport modelS from '../../assets/modelS.png'\nimport whiteModelS from '../../assets/compositor\\ 1.png'\nimport redModelS from '../../assets/compositor\\ (1)\\ 1.png'\nimport ModelOrderConfiguration from './ModelOrderConfigurations'\nimport {fetchModelConfiguration} from '../../actions'\n\nclass ModelOrderMainPage extends Component {\n    constructor(props) {\n        super(props)\n      this.state= {\n        selectedColor: ''\n      }\n        this.onColorSelectionChange = this.onColorSelectionChange.bind(this);\n      }\n\n  componentWillReceiveProps(nextProps) {\n    \n  }\n\n  onColorSelectionChange = (color) => {\n    console.log('Color:::', color);\n    this.setState({selectedColor: color});\n  }\n\n  componentDidMount() {\n    const { location } = this.props\n    const { modelName } = location.state\n    const { getModelConfig } = this.props\n\n    getModelConfig(modelName)\n  }\n\n\n  render() {\n    const { location, modelConfig, history } = this.props\n    const { modelName, selectedColor } = location.state\n    \n    return (\n        <div>\n        {modelConfig ? \n        (<Grid container>\n                <Grid item lg={7}>\n                    <img src={selectedColor === 'white' ? whiteModelS : redModelS} alt='modelS' style={{width: '100%'}}/>\n                </Grid>\n                <Grid item lg={5}>\n                    <ModelOrderConfiguration onColorChange={this.onColorSelectionChange} history={history} modelName= {modelName} modelConfig={modelConfig}/>\n                </Grid>\n            </Grid>\n        ) : null }\n        </div>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      getModelConfig: (model) => dispatch(fetchModelConfiguration(model))\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    modelConfig: state.allCarReducer.selectedModelConfig\n  }\n}\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(ModelOrderMainPage)\n"]},"metadata":{},"sourceType":"module"}