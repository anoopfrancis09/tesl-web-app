{"ast":null,"code":"const querystring = require('querystring');\n\nconst nativeFetch = window.fetch;\nexport const fetch = async (url, options) => {\n  options.headers = { ...options.headers\n  };\n  const response = await nativeFetch(url, options);\n  return response;\n};\nwindow.fetch = fetch;\n\nconst get = ({\n  url,\n  data\n}) => fetch(`${url}?${querystring.stringify(data)}`, {\n  method: 'GET'\n});\n\nconst post = ({\n  url,\n  data = {}\n}) => fetch(`${url}`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(data)\n});\n\nconst network = {\n  get,\n  post\n};\nexport default network;","map":{"version":3,"sources":["/Users/anofrancis/Desktop/tesl-web-app/src/common/network.js"],"names":["querystring","require","nativeFetch","window","fetch","url","options","headers","response","get","data","stringify","method","post","body","JSON","network"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AAEA,MAAMC,WAAW,GAAGC,MAAM,CAACC,KAA3B;AAEA,OAAO,MAAMA,KAAK,GAAG,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AAC3CA,EAAAA,OAAO,CAACC,OAAR,GAAkB,EAChB,GAAGD,OAAO,CAACC;AADK,GAAlB;AAGA,QAAMC,QAAQ,GAAG,MAAMN,WAAW,CAACG,GAAD,EAAMC,OAAN,CAAlC;AAEA,SAAOE,QAAP;AACD,CAPM;AASPL,MAAM,CAACC,KAAP,GAAeA,KAAf;;AAEA,MAAMK,GAAG,GAAG,CAAC;AAAEJ,EAAAA,GAAF;AAAOK,EAAAA;AAAP,CAAD,KACVN,KAAK,CAAE,GAAEC,GAAI,IAAGL,WAAW,CAACW,SAAZ,CAAsBD,IAAtB,CAA4B,EAAvC,EAA0C;AAC7CE,EAAAA,MAAM,EAAE;AADqC,CAA1C,CADP;;AAIA,MAAMC,IAAI,GAAG,CAAC;AAAER,EAAAA,GAAF;AAAOK,EAAAA,IAAI,GAAG;AAAd,CAAD,KACXN,KAAK,CAAE,GAAEC,GAAI,EAAR,EAAW;AACdO,EAAAA,MAAM,EAAE,MADM;AAEdL,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFK;AAKdO,EAAAA,IAAI,EAAEC,IAAI,CAACJ,SAAL,CAAeD,IAAf;AALQ,CAAX,CADP;;AASA,MAAMM,OAAO,GAAG;AACdP,EAAAA,GADc;AAEdI,EAAAA;AAFc,CAAhB;AAIA,eAAeG,OAAf","sourcesContent":["const querystring = require('querystring')\n\nconst nativeFetch = window.fetch\n\nexport const fetch = async (url, options) => {\n  options.headers = {\n    ...options.headers,\n  }\n  const response = await nativeFetch(url, options)\n\n  return response\n}\n\nwindow.fetch = fetch\n\nconst get = ({ url, data }) =>\n  fetch(`${url}?${querystring.stringify(data)}`, {\n    method: 'GET',\n  })\nconst post = ({ url, data = {} }) =>\n  fetch(`${url}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n\nconst network = {\n  get,\n  post\n}\nexport default network\n"]},"metadata":{},"sourceType":"module"}